{"version":3,"sources":["utils/push-notification.js","App.js","serviceWorker.js","index.js","assets/images/logo.svg"],"names":["createNotificationSubscription","a","navigator","serviceWorker","ready","then","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","console","log","App","useEffect","window","Notification","requestPermission","result","consent","options","body","icon","vibrate","tag","image","badge","actions","action","title","showNotification","sendNotification","sub","fetch","headers","JSON","stringify","method","mode","className","src","logo","alt","href","target","rel","screenName","data-color-scheme","data-size","aria-label","style","float","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","addEventListener","event","data","text","waitUntil","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"iSAoDaA,EAA8B,uCAAG,sBAAAC,EAAA,sEAE/BC,UAAUC,cAAcC,MAAMC,MAAK,SAAAF,GAE9C,OAAOA,EAAcG,YAClBC,UAAU,CACTC,iBAAiB,EACjBC,qBA1DN,4FA4DKJ,MAAK,SAAAK,GAEJ,OADAC,QAAQC,IAAI,sBAAuBF,GAC5BA,QAX+B,mFAAH,qDCO5BG,MA9Cf,WAeE,OAdAC,qBAAU,WDPH,kBAAmBZ,WAAa,gBAAiBa,SAQjDC,aAAaC,mBAAkB,SAASC,GAC7C,OAAOA,KCAyBb,MAAK,SAAAc,GACjB,YAAZA,GDMoB,WAC9B,IAGMC,EAAU,CACdC,KAHW,gCAIXC,KAAM,kCACNC,QAAS,CAAC,IAAK,IAAK,KACpBC,IAAK,eACLC,MARU,kCASVC,MAAO,kDACPC,QAAS,CACP,CACEC,OAAQ,SACRC,MAAO,OACPP,KAAM,4CAIZpB,UAAUC,cAAcC,MAAMC,MAAK,SAASF,GAC1CA,EAAc2B,iBAjBF,2BAiB0BV,MCzBhCW,MAGJpB,QAAQC,IAAI,8BACZZ,IAAiCK,MAAK,SAAA2B,GAAG,OD8CAtB,EC7CNsB,OD+CvCC,MAAM,kEAAmE,CACvEC,QAAS,CACP,eAAgB,iCAChB,iBAAkB,QAEpBb,KAAMc,KAAKC,UAAU1B,GACrB2B,OAAQ,OACRC,KAAM,SATgC,IAAK5B,QC1C1C,IAGD,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yDAC8B,IAC5B,uBACEC,KAAK,mDACLC,OAAO,SACPC,IAAI,uBAHN,uBAQF,yBAAKN,UAAU,gBACb,kBAAC,IAAD,CAAqBO,WAAY,eACjC,kBAAC,IAAD,CACEH,KAAK,gCACLI,oBAAkB,gDAClBC,YAAU,QACVC,aAAW,+BACXC,MAAO,CAAEC,MAAO,UALlB,0BChCJC,EAAcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DAoCN,SAASC,EAAgBC,EAAOC,GAC9BzD,UAAUC,cACPyD,SAASF,GACTrD,MAAK,SAAAwD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfhE,UAAUC,cAAcgE,YAI1BxD,QAAQC,IACN,iHAIFG,OAAOqD,iBAAiB,QAAQ,SAAAC,GAC9B1D,QAAQC,IAAI,mCAGZ,IAGMQ,EAAU,CAEdkD,KACE,0EAEFjD,KARuBgD,EAAMC,KAAKC,OAUlChD,QAAS,CAAC,IAAK,IAAK,KAGpBG,MAAO,qCACPC,QAAS,CACP,CACEC,OAAQ,SACRC,MAAO,OACPP,KAAM,4CAKZ+C,EAAMG,UAAUX,EAAa/B,iBAtBf,4BAsBuCV,OAInDuC,GAAUA,EAAOc,UACnBd,EAAOc,SAASZ,KAMlBlD,QAAQC,IAAI,sCAGR+C,GAAUA,EAAOe,WACnBf,EAAOe,UAAUb,WAO5Bc,OAAM,SAAAC,GACLjE,QAAQiE,MAAM,4CAA6CA,MCtHjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBzD,UAAW,CAGzE,GADkB,IAAIgF,IAAIC,sBAAwBpE,OAAOuC,SAASX,MACpDyC,SAAWrE,OAAOuC,SAAS8B,OAIvC,OAGFrE,OAAOqD,iBAAiB,QAAQ,WAC9B,IAAMV,EAAK,UAAMyB,sBAAN,UAEP/B,IA4FV,SAAiCM,EAAOC,GAEtC1B,MAAMyB,EAAO,CACXxB,QAAS,CAAE,iBAAkB,YAE5B7B,MAAK,SAAAgF,GAEJ,IAAMC,EAAcD,EAASnD,QAAQqD,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvF,UAAUC,cAAcC,MAAMC,MAAK,SAAAwD,GACjCA,EAAa6B,aAAarF,MAAK,WAC7BU,OAAOuC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLhE,QAAQC,IACN,oEAnHAgF,CAAwBlC,EAAOC,GAI/BhD,QAAQC,IACN,8GAKF6C,EAAgBC,EAAOC,OChC/BxD,I,kBChBA0F,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.bc463544.chunk.js","sourcesContent":["const pushServerPublicKey =\n  \"BLN0oNeI3RI2PAdGHU963MhGp0YV-1F0nl1-l6b9lE2OlUd0wxknTHEk5Ts477x9DFymWNY0vx61ZCTtmhhlqVs\";\n\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nexport const isPushNotificationSupported = () => {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n};\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nexport const initializePushNotifications = () => {\n  // request user grant to show notification\n  return Notification.requestPermission(function(result) {\n    return result;\n  });\n};\n\n/**\n * shows a notification\n */\nexport const sendNotification = () => {\n  const img = \"/react-push-project/logo192.png\";\n  const text = \"I'm a automatic push message!\";\n  const title = \"Hello there ðŸ‘‹\";\n  const options = {\n    body: text,\n    icon: \"/react-push-project/logo192.png\",\n    vibrate: [200, 100, 200],\n    tag: \"welcome-push\",\n    image: img,\n    badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n    actions: [\n      {\n        action: \"Detail\",\n        title: \"View\",\n        icon: \"https://via.placeholder.com/128/ff0000\"\n      }\n    ]\n  };\n  navigator.serviceWorker.ready.then(function(serviceWorker) {\n    serviceWorker.showNotification(title, options);\n  });\n};\n\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\nexport const createNotificationSubscription = async () => {\n  //wait for service worker installation to be ready, and then\n  return await navigator.serviceWorker.ready.then(serviceWorker => {\n    // subscribe and return the subscription\n    return serviceWorker.pushManager\n      .subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: pushServerPublicKey\n      })\n      .then(subscription => {\n        console.log(\"User is subscribed.\", subscription);\n        return subscription;\n      });\n  });\n};\n\nexport const registerClientToPushServer = (id, subscription) => {\n  // fetch(`push-server/user/${id}/push-subscription`, {\n  fetch(`https://test.watermelon-solutions.de/api/push-service/subscribe`, {\n    headers: {\n      \"content-type\": \"application/json;charset=UTF-8\",\n      \"sec-fetch-mode\": \"cors\"\n    },\n    body: JSON.stringify(subscription),\n    method: \"POST\",\n    mode: \"cors\"\n  });\n};\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./assets/images/logo.svg\";\nimport \"./style/App.css\";\nimport GitHubButton from \"react-github-btn\";\nimport { TwitterFollowButton } from \"react-twitter-embed\";\nimport {\n  isPushNotificationSupported,\n  initializePushNotifications,\n  sendNotification,\n  createNotificationSubscription,\n  registerClientToPushServer\n} from \"./utils/push-notification\";\n\nfunction App() {\n  useEffect(() => {\n    if (isPushNotificationSupported()) {\n      initializePushNotifications().then(consent => {\n        if (consent === \"granted\") {\n          sendNotification();\n        }\n      });\n      console.log(\"Registering to the server!\");\n      createNotificationSubscription().then(sub =>\n        registerClientToPushServer(\"id\", sub)\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          This is the test PWA for my{\" \"}\n          <a\n            href=\"https://github.com/mjoellnier/react-push-project\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Push Project\n          </a>\n        </p>\n        <div className=\"socialBanner\">\n          <TwitterFollowButton screenName={\"coding_max\"} />\n          <GitHubButton\n            href=\"https://github.com/mjoellnier\"\n            data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n            data-size=\"large\"\n            aria-label=\"Follow @mjoellnier on GitHub\"\n            style={{ float: \"right\" }}\n          >\n            Follow @mjoellnier\n          </GitHubButton>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              window.addEventListener(\"push\", event => {\n                console.log(\"[Service Worker] Push Received.\");\n\n                //const { image, tag, url, title, text } = event.data.json();\n                const notificationText = event.data.text();\n                const title = \"A brand new notification!\";\n\n                const options = {\n                  //data: url,\n                  data:\n                    \"something you want to send within the notification, such an URL to open\",\n                  //body: text,\n                  body: notificationText,\n                  //icon: image,\n                  vibrate: [200, 100, 200],\n                  //tag: tag,\n                  //image: image,\n                  badge: \"https://spyna.it/icons/favicon.ico\",\n                  actions: [\n                    {\n                      action: \"Detail\",\n                      title: \"View\",\n                      icon: \"https://via.placeholder.com/128/ff0000\"\n                    }\n                  ]\n                };\n                //call the method showNotification to show the notification\n                event.waitUntil(registration.showNotification(title, options));\n              });\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5ba10043.svg\";"],"sourceRoot":""}