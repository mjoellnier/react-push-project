{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/images/logo.svg"],"names":["options","body","icon","vibrate","tag","image","badge","actions","action","title","App","useEffect","navigator","serviceWorker","ready","then","showNotification","className","src","logo","alt","href","target","rel","screenName","data-color-scheme","data-size","aria-label","style","float","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"wQASMA,EAAU,CACdC,KAHW,yCAIXC,KAAM,+CACNC,QAAS,CAAC,IAAK,IAAK,KACpBC,IAAK,cACLC,MARU,eASVC,MAAO,kDACPC,QAAS,CACP,CACEC,OAAQ,SACRC,MAAO,OACPP,KAAM,4CA2CGQ,MAtCf,WAOE,OANAC,qBAAU,WACRC,UAAUC,eACRD,UAAUC,cAAcC,MAAMC,MAAK,SAASF,GAC1CA,EAAcG,iBArBR,wBAqBgChB,QAEzC,IAED,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yDAC8B,IAC5B,uBACEC,KAAK,mDACLC,OAAO,SACPC,IAAI,uBAHN,uBAQF,yBAAKN,UAAU,gBACb,kBAAC,IAAD,CAAqBO,WAAY,eACjC,kBAAC,IAAD,CACEH,KAAK,gCACLI,oBAAkB,gDAClBC,YAAU,QACVC,aAAW,+BACXC,MAAO,CAAEC,MAAO,UALlB,0BCpCJC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAoCN,SAASC,EAAgBC,EAAOC,GAC9B1B,UAAUC,cACP0B,SAASF,GACTtB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfjC,UAAUC,cAAciC,YAI1BC,QAAQC,IACN,iHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAAST,KAMlBO,QAAQC,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCxFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmB1B,UAAW,CAGzE,GADkB,IAAI8C,IAAIC,sBAAwB3B,OAAOC,SAASZ,MACpDuC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,sBAAN,UAEP7B,IA8DV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BhD,MAAK,SAAAiD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxD,UAAUC,cAAcC,MAAMC,MAAK,SAAAyB,GACjCA,EAAa6B,aAAatD,MAAK,WAC7BiB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBlC,EAAOC,GAI/BS,QAAQC,IACN,8GAKFZ,EAAgBC,EAAOC,OChC/BzB,I,kBChBA2D,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.6c625baf.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport logo from \"./assets/images/logo.svg\";\nimport \"./style/App.css\";\nimport GitHubButton from \"react-github-btn\";\nimport { TwitterFollowButton } from \"react-twitter-embed\";\n\nconst img = \"/logo192.png\";\nconst text = \"Take a look at this brand new t-shirt!\";\nconst title = \"New Product Available\";\nconst options = {\n  body: text,\n  icon: \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\",\n  vibrate: [200, 100, 200],\n  tag: \"new-product\",\n  image: img,\n  badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n  actions: [\n    {\n      action: \"Detail\",\n      title: \"View\",\n      icon: \"https://via.placeholder.com/128/ff0000\"\n    }\n  ]\n};\n\nfunction App() {\n  useEffect(() => {\n    navigator.serviceWorker &&\n      navigator.serviceWorker.ready.then(function(serviceWorker) {\n        serviceWorker.showNotification(title, options);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          This is the test PWA for my{\" \"}\n          <a\n            href=\"https://github.com/mjoellnier/react-push-project\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Push Project\n          </a>\n        </p>\n        <div className=\"socialBanner\">\n          <TwitterFollowButton screenName={\"coding_max\"} />\n          <GitHubButton\n            href=\"https://github.com/mjoellnier\"\n            data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n            data-size=\"large\"\n            aria-label=\"Follow @mjoellnier on GitHub\"\n            style={{ float: \"right\" }}\n          >\n            Follow @mjoellnier\n          </GitHubButton>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5ba10043.svg\";"],"sourceRoot":""}