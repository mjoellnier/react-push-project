{"version":3,"sources":["assets/images/logo.svg","utils/push-notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","createNotificationSubscription","a","navigator","serviceWorker","ready","then","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","console","log","catch","error","warn","registerClientToPushServer","fetch","headers","body","JSON","stringify","method","mode","response","json","result","key","App","useState","setClientKey","notificationTitle","setNotificationTitle","notificationMessage","setNotificationMessage","useEffect","Notification","requestPermission","consent","options","icon","vibrate","tag","image","badge","actions","action","title","showNotification","sendNotification","sub","clientId","className","src","logo","alt","href","target","rel","id","placeholder","maxLength","value","onChange","type","onClick","message","screenName","data-color-scheme","data-size","aria-label","style","float","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afab6b74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5ba10043.svg\";","const pushServerPublicKey =\n  \"BLN0oNeI3RI2PAdGHU963MhGp0YV-1F0nl1-l6b9lE2OlUd0wxknTHEk5Ts477x9DFymWNY0vx61ZCTtmhhlqVs\";\n\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nexport const isPushNotificationSupported = () => {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n};\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nexport const initializePushNotifications = () => {\n  // request user grant to show notification\n  return Notification.requestPermission(function(result) {\n    return result;\n  });\n};\n\n/**\n * shows a notification\n */\nexport const sendNotification = () => {\n  const img = \"/react-push-project/logo192.png\";\n  const text = \"I'm a automatic push message!\";\n  const title = \"Hello there ðŸ‘‹\";\n  const options = {\n    body: text,\n    icon: \"/react-push-project/logo192.png\",\n    vibrate: [200, 100, 200],\n    tag: \"welcome-push\",\n    image: img,\n    badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n    actions: [\n      {\n        action: \"Detail\",\n        title: \"View\",\n        icon: \"https://via.placeholder.com/128/ff0000\"\n      }\n    ]\n  };\n  navigator.serviceWorker.ready.then(function(serviceWorker) {\n    serviceWorker.showNotification(title, options);\n  });\n};\n\nconst urlBase64ToUint8Array = base64String => {\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\nexport const createNotificationSubscription = async () => {\n  //wait for service worker installation to be ready, and then\n  return await navigator.serviceWorker.ready\n    .then(serviceWorker => {\n      // subscribe and return the subscription\n      return serviceWorker.pushManager\n        .subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: urlBase64ToUint8Array(pushServerPublicKey)\n        })\n        .then(subscription => {\n          console.log(\"User is subscribed.\", subscription);\n          return subscription;\n        });\n    })\n    .catch(error =>\n      console.warn(\"error during notification subscription: \", error)\n    );\n};\n\n/**\n * Calls the remote server to register this client to the notification api.\n * Gets its key from the server.\n */\nexport const registerClientToPushServer = async subscription => {\n  return await fetch(\n    `https://test.watermelon-solutions.de/api/push-service/subscribe`,\n    {\n      headers: {\n        \"content-type\": \"application/json;charset=UTF-8\",\n        \"sec-fetch-mode\": \"cors\"\n      },\n      body: JSON.stringify(subscription),\n      method: \"POST\",\n      mode: \"cors\"\n    }\n  )\n    .then(response => response.json())\n    .then(result => result.key);\n};\n\nexport const sendPushMessageViaServer = (id, title, message) => {\n  fetch(\n    `https://test.watermelon-solutions.de/api/push-service/send?title=${title}&message=${message}`,\n    {\n      headers: {\n        \"content-type\": \"application/json;charset=UTF-8\",\n        \"sec-fetch-mode\": \"cors\"\n      },\n      method: \"GET\",\n      mode: \"cors\"\n    }\n  )\n    .then(response => console.log(response))\n    .catch(error => console.log(\"Error during push message sending: \", error));\n};\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./assets/images/logo.svg\";\nimport \"./style/App.css\";\nimport GitHubButton from \"react-github-btn\";\nimport { TwitterFollowButton } from \"react-twitter-embed\";\nimport {\n  isPushNotificationSupported,\n  initializePushNotifications,\n  sendNotification,\n  createNotificationSubscription,\n  registerClientToPushServer,\n  sendPushMessageViaServer\n} from \"./utils/push-notification\";\n\nfunction App() {\n  const [clientKey, setClientKey] = useState();\n  const [notificationTitle, setNotificationTitle] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (isPushNotificationSupported()) {\n      initializePushNotifications().then(consent => {\n        if (consent === \"granted\") {\n          sendNotification();\n        }\n      });\n      console.log(\"Registering to the server!\");\n      createNotificationSubscription().then(sub => {\n        let clientId = registerClientToPushServer(sub);\n        setClientKey(clientId);\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          This is the test PWA for my{\" \"}\n          <a\n            href=\"https://github.com/mjoellnier/react-push-project\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Push Project\n          </a>\n        </p>\n        <div id=\"notification-form-wrapper\">\n          <form id=\"notification-form\" action=\"submit\">\n            <input\n              className=\"input-field\"\n              placeholder=\"Notification-Title\"\n              maxLength={50}\n              value={notificationTitle}\n              onChange={target => setNotificationTitle(target.target.value)}\n            />\n            <input\n              className=\"input-field\"\n              placeholder=\"Notification-Message\"\n              maxLength={200}\n              value={notificationMessage}\n              onChange={target => setNotificationMessage(target.target.value)}\n            />\n            <input\n              type=\"button\"\n              value=\"SEND!\"\n              className=\"send-button\"\n              onClick={() =>\n                sendPushMessageViaServer(\n                  clientKey,\n                  notificationTitle,\n                  notificationMessage\n                )\n              }\n            />\n          </form>\n        </div>\n        <div className=\"socialBanner\">\n          <TwitterFollowButton screenName={\"coding_max\"} />\n          <GitHubButton\n            href=\"https://github.com/mjoellnier\"\n            data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n            data-size=\"large\"\n            aria-label=\"Follow @mjoellnier on GitHub\"\n            style={{ float: \"right\" }}\n          >\n            Follow @mjoellnier\n          </GitHubButton>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n        );\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}